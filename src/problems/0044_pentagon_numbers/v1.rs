//
// Pentagon numbers, v1
// https://projecteuler.net/problem=44
//
// Pentagonal numbers are generated by the formula, P_n=n(3n−1)/2.
// The first ten pentagonal numbers are:
//     1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
// It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8.
// However, their difference, 70 − 22 = 48, is not pentagonal.
// Find the pair of pentagonal numbers, P_j and P_k, for which their sum and difference are
// pentagonal and D = |P_k − P_j| is minimised; what is the value of D?
//

fn is_pentagonal(possible_pentagonal: u64) -> bool {
    // We have: `n(3n−1)/2 = X` <=> `3n^2 - n - 2X = 0`, and the solutions are:
    // `n = (-1 + sqrt(1 + 24X)) / 6` ; `n = (-1 - sqrt(1 + 24X)) / 6`
    // As `X` is positive, the second solution cannot be used, thus using the first solution here.
    // In this function `X` is named `possible_pentagonal`, an integer, and we need to check
    // that its solution is an integer for being pentagonal (hence the modulo operations).
    let square_value = 1 + 24 * possible_pentagonal;
    let sqrt_value_as_integer = (square_value as f64).sqrt() as u64;
    return square_value % sqrt_value_as_integer == 0 && (sqrt_value_as_integer + 1) % 6 == 0;
}

pub fn run() {
    let mut prev_pentagonals = vec![];
    let mut n: u64 = 1;
    loop {
        let pentagonal = n * (3 * n - 1) / 2;
        for i in 0..(n - 1) {
            let prev_pentagonal = prev_pentagonals[(n - i - 2) as usize];
            if is_pentagonal(pentagonal + prev_pentagonal)
                && is_pentagonal(pentagonal - prev_pentagonal)
            {
                println!("Result: {}", pentagonal - prev_pentagonal);
                return;
            }
        }
        prev_pentagonals.push(pentagonal);
        n += 1;
    }
}
